<?xml version="1.0"?>
<launch>

  <!-- roslaunch arguments -->
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>

  <!-- rbcar_control launch file -->
  <include file="$(find rbcar_control)/launch/rbcar_control.launch" />
  
  <!-- include file="$(find rbcar_pad)/launch/rbcar_pad.launch" / -->
  <!-- use a pad that publishes geometry_msgs::Twist refs -->
  <include file="$(find summit_xl_pad)/launch/summit_xl_pad.launch"/>
  
  <!-- transform these vel msgs to robot commands via the twist2ack node -->
  <node name="twist2ack" pkg="rbcar_twist2ack" type="twist2ack.py" respawn="true" output="screen"/>
  
  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rbcar_gazebo)/worlds/rbcar_gs.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="headless" value="false"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
         command="$(find xacro)/xacro.py '$(find rbcar_description)/robots/rbcar.urdf.xacro'" />
         
  <!-- Call a python script to the run a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -model rbcar -param robot_description -z 1"/>

</launch>
